/*

set command line paramenters
    run.args = ["test"]

IDE->Settings->Build->Gradle:
    - select: Gradle wrapper customization in build script
    - delegate IDE build/run actions to gradle

dry run gradle
	./gradlew -q -m

get info about gradle daemons
    ./gradlew   --status

clear gradle tasks cache	 / force task
    ./gradlew  --rerun-tasks tasks

for increase gradle speed:  analyze task profile
	./gradlew --profile tasks
	./gradlew build --scan

increase gradle wrapper  version
	./gradlew wrapper --gradle-version=5.6.2

debugiing
    ./gradlew -q -m -d
    ./gradlew --debug
     arguments== -d
     ./gradlew tasks -Dorg.gradle.debug=true --no-daemon
    #org.gradle.daemon=false
    #org.gradle.debug=true


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

check jar new versions  help/dependencyUpdates
    ./gradlew -q dependencyUpdates

jar libraries clear dependencies cache
    ./gradlew cleanBuildCache

get project structure
    ./gradlew projects

get JAR dependencies hierarchy
    ./gradlew -q dependencies
    ./gradlew -q dependencyInsight --dependency mylibname --configuration scm

generate module-info.java
    jdeps --generate-module-info ./ build/libs

draw class diargamm and architecture inside Structure101
-- Menu -- New Local Project -- Static classpath
-- add class folder: myapp/build/classes/java/main
-- add source files folder: myapp/src

show gradle dependencies diagram
    project->right click-> Diagrams -> Show diagram -> Gradle dependencies

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

testing
	./gradlew check

testing off
    --exclude-task test

benchmarking
    for benchmarking start JMH gradle task and use JMH source set
    ./gradlew --stop && ./gradlew clean jmh --no-daemon
    jmh/jmh          - run benchmark, get build/reports/jmh/results.json
    other/jmhReport  - json->html

profiling
    jprofiler/saveProfile   - convert .jps to build/tmp/RecordedObjects.csv
        runProfile depends on saveProfile and starts automaticaly
    change command line arguments as  args = ["--myarg1", "--myarg2"]

for debug with flow
    0) start standalone flow server
    1) uncomment "flow" section below
    2) run gradle task
    3) open site http://localhost:7575/#




*/

// todo move to  plugins{ id 'org.springframework.boot' version  '2.2.0.M6'
buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://repo.spring.io/libs-milestone' }
        maven { url 'https://repo.spring.io/libs-snapshot' }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.2.2.RELEASE")
        //classpath("org.junit.platform:junit-platform-gradle-plugin:1.2.0")
    }
}



plugins {
    id 'java'
    id 'base'
    id 'java-library'
    id 'application'
    id 'idea'
    ////id 'com.ewerk.gradle.plugins.auto-value' version '1.0.8'

    id 'com.dorongold.task-tree' version '1.4' /* ./gradlew -q build taskTree */
    id 'com.github.ben-manes.versions' version '0.27.0' /* ./gradlew -q dependencyUpdates */

    id "me.champeau.gradle.jmh" version  "0.4.8" // todo  "0.5.0" is wrong
    id "io.morethan.jmhreport" version "0.9.0"

    id "com.jprofiler" version "11.0.2"


    id "io.spring.dependency-management" version "1.0.8.RELEASE"

    id "io.freefair.lombok" version "4.1.6"

    id "org.asciidoctor.convert" version "2.4.0"
}

apply plugin: 'org.springframework.boot'
//apply plugin: 'org.junit.platform.gradle.plugin'



////////////////////////////// for running app//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

wrapper {
    gradleVersion = '6.0.1'  //'5.6.2'
}

//plugin application
mainClassName = "life.expert.algo.research.app.Application"
//run.args = ["test"]
project.version = '1.0'

/* todo https://github.com/spring-projects/spring-shell/issues/167*/
bootRun {
    standardInput = System.in
}

bootJar {
    launchScript()
    manifest {
        attributes('Implementation-Title':project.name,
                   'Implementation-Version':project.version)
    }
}

springBoot {
    buildInfo {
        properties {
            artifact = 'winter'
            group = 'life.expert'
            name = 'Sample algo application'
        }
    }
}


java {
    //Defines which language version of Java your source files should be treated as.
    sourceCompatibility = JavaVersion.VERSION_12
    //Defines the minimum JVM version your code should run on, i.e. it determines the version of byte code the compiler generates.
    targetCompatibility = JavaVersion.VERSION_12
}




////////////////////////////// lombok //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//lombok.config[''] = ''
lombok.config[ 'lombok.log.fieldName' ] = 'logger_'
lombok.config[ 'lombok.toString.includeFieldNames' ] = 'false'
lombok.config[ 'lombok.toString.callSuper' ] = 'call'
lombok.config[ 'lombok.singular.useGuava' ] = 'true'


////////////////////////////// manifold //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//tasks.withType(JavaCompile) {
//    options.compilerArgs += '-Xplugin:Manifold strings exceptions'
//    options.fork = true
//}


//////////////////////////////testing//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//test {
//    useJUnitPlatform()
//}

configurations {
    // Makes the intTestImplementation configuration extend from implementation,
    // which means that all the declared dependencies of the production code
    // also become dependencies of the integration tests
    testIntegrationImplementation.extendsFrom testImplementation /**implementation*/
    testIntegrationRuntimeOnly.extendsFrom testRuntimeOnly  /**runtimeOnly*/
    testFunctionalImplementation.extendsFrom testImplementation /**implementation*/
    testFunctionalRuntimeOnly.extendsFrom testRuntimeOnly  /**runtimeOnly*/
}


sourceSets {
    testIntegration {
        java.srcDir file('src/testIntegration/java')
        resources.srcDir file('src/testIntegration/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
    testFunctional {
        java.srcDir file('src/testFunctional/java')
        resources.srcDir file('src/testFunctional/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}


task testIntegration(type:Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.testIntegration.output.classesDirs
    classpath = sourceSets.testIntegration.runtimeClasspath
    mustRunAfter test
}


task testFunctional(type:Test) {
    description = 'Runs the functional tests.'
    group = 'verification'
    testClassesDirs = sourceSets.testFunctional.output.classesDirs
    classpath = sourceSets.testFunctional.runtimeClasspath
    mustRunAfter test
}

//check.dependsOn testIntegration
testIntegration.dependsOn bootJar
check.dependsOn testFunctional

//////////////////////////////benchmarking//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
jmh {
    //iterations = 1 // Number of measurement iterations to do.
    //warmupIterations = 1 // Number of warmup iterations to do.
    jvmArgs = ['-Xms4G', '-Xmx4G']
    timeUnit = 's' // Output time unit. Available time units are: [m, s, ms, us, ns].
    resultFormat = 'JSON' // Result format type (one of CSV, JSON, NONE, SCSV, TEXT)
    forceGC = true // Should JMH force GC between iterations?

    /** for real benchmarking mode: you need uncomment below and comment all another
     benchmarkMode = ['avgt'] // Benchmark mode. Available modes are: [Throughput/thrpt, AverageTime/avgt, SampleTime/sample, SingleShotTime/ss, All/all]
     fork = 2 // How many times to forks a single benchmark. Use 0 to disable forking altogether
     */
    benchmarkMode = ['ss']
    iterations = 1
    warmupIterations = 0
    fork = 0
}

jmhReport {
    jmhResultPath = project.file('build/reports/jmh/results.json')
    jmhReportOutput = project.file('build/reports/jmh')
}


//////////////////////////////flow//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
//for debug RUNNING with flow 3)
applicationDefaultJvmArgs = [
        '-javaagent:/Users/wilmer/.flow/resources/javaagent.jar',
        '-Dflow.agent.autostart',
        '-Dflow.agent.include=life.expert'
]

//for debug TESTING with flow 4)
test {
    useJUnitPlatform()

    jvmArgs = [
            '-javaagent:/Users/wilmer/.flow/resources/javaagent.jar',
            '-Dflow.agent.autostart',
            '-Dflow.agent.include=life.expert'
    ]
}
*/

//////////////////////////////profiling//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 - please config filenames and location here, used in saveProfile(),logProfile()
 - also change getLogFile if log file names differently

 runProfile  - run jprofiler and generate dump file
 saveProfile  - convert dump to csv
 */



jprofiler {
    installDir = file('/Applications/JProfiler.app/Contents/Resources/app')
}


tasks.create('runProfile', com.jprofiler.gradle.JavaProfile) {

    main = mainClassName
    classpath sourceSets.main.runtimeClasspath
    offline = true
    sessionId = 168 /*this is ID of profile inside config.xml*/
    configFile = file('/Users/wilmer/.jprofiler10/config.xml')
    group = "jprofiler"
    args = ["--myarg1", "--myarg2"]
}

ext.csvMethodStatistics = "$projectDir/build/tmp/MethodStatistics.csv"
ext.csvRecordedObjects = "$projectDir/build/tmp/RecordedObjects.csv"
tasks.create('saveProfile', com.jprofiler.gradle.Export) {
    snapshotFile = file("$projectDir/build/tmp/jprofile.jps")
    views {
        view('MethodStatistics', csvMethodStatistics)
        view('RecordedObjects', csvRecordedObjects, [viewfilters:'life'])
    }
}
saveProfile.dependsOn runProfile


//////////////////////////////documentation//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
asciidoctor {
    sourceDir = file("$projectDir")
    outputDir = file('build/docs')
}

javadoc {
    options.tags = ["apiNote:a:API Note:",
                    "implSpec:a:Implementation Requirements:",
                    "implNote:a:Implementation Note:"]

    if( JavaVersion.current().isJava11Compatible() )
        {
        options.addBooleanOption('html5', true)
        }
}

//////////////////////////////dependencies//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
implementation
	extends compile
	Implementation only dependencies.
compileOnly
	Compile time only dependencies, not used at runtime.
runtimeOnly
	Runtime only dependencies.
testImplementation
	extends testCompile, implementation
	Implementation only dependencies for tests.
testCompileOnly
	Additional dependencies only for compiling tests, not used at runtime.
testRuntimeOnly
	extends runtimeOnly Runtime only dependencies for running tests. Used by task test.
testRuntimeClasspath
	extends testRuntimeOnly, testRuntime, testImplementation
	Runtime classpath for running tests.
*/



repositories {
    mavenCentral()
    mavenLocal()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/libs-milestone' }
    maven { url 'https://repo.spring.io/libs-snapshot' }
}

dependencies {
    /*
    compileOnly 'org.jetbrains:annotations:17.0.0'
    annotationProcessor 'com.google.auto.value:auto-value:1.6.5'
    compileOnly 'com.google.auto.value:auto-value-annotations:1.6.5'

    implementation 'com.google.flogger:flogger:0.4'
    runtimeOnly 'com.google.flogger:flogger-system-backend:0.4'

    implementation 'org.apache.commons:commons-configuration2:2.4'
    implementation 'com.github.ben-manes.caffeine:caffeine:2.6.2'
    */

    implementation 'life.expert:himalaya:1.0.59'

//    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.0-M1' /*!! RC3 версию глючит c JPMS*/
//    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.5.0-M1'
//    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.0-M1'
    testImplementation 'org.mockito:mockito-core:3.2.0'
    testImplementation 'com.google.truth:truth:1.0'


    implementation 'org.apache.commons:commons-lang3:3.9'
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'commons-io:commons-io:2.6'

    implementation 'com.google.guava:guava:28.1-jre'
    implementation 'com.google.code.gson:gson:2.8.6'

    testImplementation "io.projectreactor:reactor-test"

/* spring itself has project reactor inside
    implementation "io.projectreactor:reactor-core"
    implementation "io.projectreactor.addons:reactor-extra"
    dependencyManagement {
        imports {
            mavenBom "io.projectreactor:reactor-bom:Californium-SR14"
        }
    } */

    ////runtimeOnly "io.projectreactor.addons:reactor-logback"  //// для супербыстрого записи в лог
    //implementation 'ch.qos.logback:logback-classic:1.2.3'
    //implementation 'ch.qos.logback:logback-core:1.2.3'
    //implementation 'ch.qos.logback:logback-classic:1.3.0-alpha5' //включает  implementation  'org.slf4j:slf4j-api:1.8.0-beta4'
    //!! -alpha5 глючит!!

    implementation 'com.oath.cyclops:cyclops:10.3.3'
    ////implementation 'com.oath.cyclops:cyclops-reactive-collections:10.3.0'
    implementation 'io.vavr:vavr:0.10.2'
    compileOnly 'io.vavr:vavr-match:0.10.2'
    annotationProcessor 'io.vavr:vavr-match-processor:0.10.2'


    implementation 'org.springframework.boot:spring-boot-dependencies:2.2.2.RELEASE'
    implementation "org.springframework.shell:spring-shell-starter:3.0.0.BUILD-SNAPSHOT"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.springframework.shell:spring-shell-core-test-support:3.0.0.BUILD-SNAPSHOT"

//    implementation  'systems.manifold:manifold-all:2019.1.0-gw'          //API
//    annotationProcessor  'systems.manifold:manifold-all:2019.1.0-gw'
//    testImplementation  'systems.manifold:manifold-all:22019.1.0-gw'
//    testAnnotationProcessor  'systems.manifold:manifold-all:2019.1.0-gw'

    implementation 'org.springframework.boot.experimental:spring-boot-starter-data-r2dbc:0.1.0.BUILD-SNAPSHOT'
    implementation 'org.springframework.boot.experimental:spring-boot-starter-r2dbc-h2:0.1.0.BUILD-SNAPSHOT'
    testImplementation 'org.springframework.boot.experimental:spring-boot-test-autoconfigure-r2dbc:0.1.0.BUILD-SNAPSHOT'
//    implementation 'org.springframework.boot.experimental:spring-boot-starter-data-r2dbc:0.1.0.M2'
//    implementation 'org.springframework.boot.experimental:spring-boot-starter-r2dbc-h2:0.1.0.M1'
//    testImplementation 'org.springframework.boot.experimental:spring-boot-test-autoconfigure-r2dbc:0.1.0.M2'

}


//// if necessary force library
//configurations.all {
//    resolutionStrategy.force "com.google.auto.value:auto-value:1.6.3"
//}

//set autovalue autogenerated dir
//autoValue {
//    library = "com.google.auto.value:auto-value:1.6.3"
//    autoValueSourcesDir = "$projectDir/src/main-generated/java"
//}

